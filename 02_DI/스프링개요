# 스프링 개요
  - 선수학습 : java, jsp(servlet), 스크립트언어(HTML, JavaScript, css, jquery)
  - 개념 : 자바 언어를 기반으로 한 애플리케이션을 제작할 때 효율적으로 빠르게 개발할 수
  		 있도록 하는 애플리케이션 프레임워크(프로그래밍 툴).
  
# 스프링 프레임워크란?
  - 스프링은 엔터프라이즈(기업용) 애플리케이션에서 필요로 하는 여러가지 기능들을 제공하는 프레임워크.
  
  - java EE가 제공하는 기능들을 스프링에서도 지원하고 있기 때문에 국내에서 가장 인기있는
   프레임워크로 자리를 잡았음.
   
   - 스프링은 Java EE에서 제공하는 기능 외에 DI나 AOP 같은 기능들을 추가적으로 제공함.
   
   - Java EE에서 MVC-2 모델 방식도 새로운 애플리케이션을 개발할 때마다 일일이 처음부터 
   하나씩 다시 개발해야 하는 단점이 있음. 모든 애플리케이션에서 공통적인 기능들을 처음부터 다시
   개발해야 한다는 것은 상단히 비효율적임
   
   - 이보다 더 좋은 방법은 없는 것일까? 있다.... 스프링이다.
   애플리케이션 개발 시에 일반적인 웹 애플리케이션에서 많이 사용하는 기능들은 미리 만들어서 제공하고,
   그 외의 필요한 부분만 추가 및 수정하는 방식을 이용하면 됨. 이렇게 하면 훨씬 효율적일 뿐만 아니라
   일정한 형식에 따라서 개발을 진행하므로 표준화가 이루어져 생산성도 높일 수 있음.
   
   - 애플리케이션은 규모가 커질수록 각각의 기능들을 개발자가 따로 개발하는 것보다는 표준화된 방법으로
   개발하는 것이 상당히 유리함.
   
   - 그렇다면 프레임워크(framework)란?
   프레임워크(framework) 의 사전적 의미는 "어떤 것을 구성하는 구조 또는 뼈대" 라는 뜻을 가지고 있음.
   소프트웨어적인 의미로는 " 기능을 미리 클래스나 인터페이스 등으로 만들어 제공하는 반제품"
   정도로 해석을 할 수 있음. 즉, 어느 정도는 완성된 상태로 제공되는 기능을 말한다.
   
# 스프링 프레임워크의 특징
  - 스프링은 경량의 프레임워크.
   * 자바의 객체를 담고 있는 컨테이너( IOC 컨테이너).
   * 객체의 생성, 관리, 소멸과 같은 생명 주기를 관리함.
   - 스프링은 유지보수가 용이함.
   - 스프링은 개발 기간을 효율적으로 단축할 수 있음.
   
   
# DI(Dependency Injection: 의존성 주입)
  - DI 는 스프링의 핵심 개념 줄 하나임.
  
  - 기존에는 어떤 클래스가 다른 클래스의 기능(메서드)을 사용하려면 당연히 개발자가 코드에서
    직접적으로 사용할 클래스의 생성자를 호출해서 사용을 하였음(new 키워드를 이용).
    따라서 사용할 클래스와 사용된 클래스의 관계는 개발자에 의해 직접 코드에서 부여가 되었음.
    (의존도가 높다 - 강한 결합)
    
  - 스프링에서는 객체 사이의 의존 관계를 객체 자신이 아닌 외부(스프링 컨테이너) 에서 수행하는 개념임.
  즉, 이런 연관관계를 개발자가 직접 코딩을 통해서 부여하는 것이 아니라 스프링 컨테이너가 연관 관계를
  직접 규정하는 것을 말함. 그러면 코드에서 직접적인 연관 관계가 발생하지 않으므로 각각의 클래스들의 
  변경이 자유로와짐(약한 결합).
  따라서 스프링 프레임워크에서는 각 클래스들의 연관 관계를 클래스들 간의 사이에서 맺어지는 것이 아니라,
  스프링 프레임워크에서 설정을 통해 맺어줌으로써 클래스들끼리의 연관 관계를 맺지 않도록 구현을 해 놓았음.
  
  - 스프링 프레임워크에서 의존 관계 설정은 설정 파일(bean.xml) 이나 애노테이션을 이용하여 설정을 함.
  
  - 스프링에서 클래스(빈 : bean)를 담는 그릇을 컨테이너라고 함.
  스프링 기반 애플리케이션에서는 스프링 컨테이너에서 객체가 태어나고, 자라고 소멸을 함.
  스프링 컨테이너는 객체를 생성하고, 서로 엮어주고 하는 전체적인 생명 주기를 관리함.
  스프링 컨테이너는 스프링 프레임워크 핵심부에 위치함. 스프링 컨테이너를 종속 객체 주입을 이용해서
  애플리케이션을 구성하는 컴포넌트를 관리하며, 협력 컴포넌트 간 연관 관계의 형성도 스프링 컨테이너에서
  이루어짐.
  
# DI(의존성 주입) 하는 방법 - 2가지
  - setter(설정 메서드) 메서드를 이용하는 주입 방법
  - constructor(인자생성자) 를 이용하는 주입 방법.
  
  * 의존 관계를 설정하는 방법
  	- XML 파일을 이용하여 의존 관계 설정.
  	- Java 코드를 이용하여 의존 관계 설정. - 애노테이션을 이용.
  	- XML과 Java 를 혼용해서 의존관계 설정.
  	
  	
  	https://projectlombok.org/download 클래스의 멤버의 setter,getter를 자동으로 관리해 주는 라이브러리
  	file double click -> specity location -> path ->  C:\NCS\download\Spring\spring-tool-suite-3.9.13.RELEASE-e4.16.0-win32-x86_64\sts-bundle\sts-3.9.13.RELEASE
  	-> sts.exe click -> select 후 install
  	참고사이트 https://it-banlim.tistory.com/4
  	
  	https://mvnrepository.com/ -> lombok search  -> 1. Project Lombok -> 1.18.24 -> 코드 복사 후 pom.xml에 복사 후 Maven에서 추가되었는지 확인할것
  	이루 @Data 애너테이션을 클래스 이름 상단에 추가 후 outline에서 setter(), getter() 메서드가 추가되었는지 확인해 본다.
  	
  	다운로드 후 더블클릭 후 경로설정하여 5/18일자 영상 확인 인스톨
  	
  	
  	<!-- 
		네임스페이스 : <property> 태그나 <constructor-arg> 태그를 사용하다 보면
					작성해야 할 xml 문서의 내용이 전반적으로 증가를 하게 됨.
					이것을 좀 더 짧게 작성하게 해 주는 것이 네임스페이스임.
		
					- 속성 (setter) 주입시에는 p 라는 네임스페이스를 사용함.
					형식) p : 매개변수 이름 ="값" 또는 p: 매개변수 이름 -ref="참조할 객체의 id"
					
					- 생성자 주입 시에는 c라는 네임스페이스를 사용함.
					형식) c : 매개변수 이름 = "값" 또는 c: 매개변수 이름 -ref="참조할 객체의 id"
					
		네임스페이스 설정 : 하단 Namespaces 내부 c,p checkbox click
	 -->
	 
/*
 * DI 설정 시 Java 코드에서 애노테이션을 설정하여 주입하는 방법.
 * 
 * - 설정 시에 cglib 라이브러리가 필요함
 * 	 ==> 라이브러리 다운로드 후 pom.xml 파일에 라이브러리를 추가해 주어야 함.
 	https://mvnrepository.com/ - > cglib(search)2.2.2 - >pom.xml추가
 * 
 * - @configuration, @Bean애노테이션을 사용함.
 * 
 * - @configuration : 클래스 앞에 선언하는 애노테이션
 * 					  "해당 클래스는 스프링 설정에 사용되는 클래스입니다."
 * 					  라고 알려쥬는 애노테이션
 * 
 * - @Bean : 메서드 앞에 사용되는 애노테이션 
 * 			"해당 메서드는 객체를 생성하는데 사용" 된다는 의미.
 * 	
 * - 애노테이션의 역할
 *   * 컴파일러에게 정보를 알려주는 역할.
 *   * 컴파일 할 때와 설치 시 작업을 지정하는 역할
 *   * 실행할 때에 별도의 처리가 필요한 경우 사용되는 역할
 * 
 */	
 
 	<!-- 
		<context:annotation-config> 
		태그는 특정 패키지 안에 있는 클래스 중에서
		@configuration, @Bean, @Autowired, @Resource 애노테이션이 
		존재하면 해당 애노테이션을 인식할 수 있도록 만들어 주는 태그 
		Namespaces에서 체크 필요
	-->
	
	우리가 알던 기존의 Java Programming 에서는 Class를 생성하고 new를 입력하여 원하는 객체를 직접 생성한 후에 사용했었습니다.
	하지만 Spring에서는 직접 new를 이용하여 생성한 객체가 아니라, Spring에 의하여 관리당하는 자바 객체를 사용합니다.
	 이렇게 Spring에 의하여 생성되고 관리되는 자바 객체를 Bean이라고 합니다.
	Spring Framework 에서는 Spring Bean 을 얻기 위하여 ApplicationContext.getBean() 와 같은 메소드를 사용하여 Spring 에서 직접 자바 객체를 얻어서 사용합니다.
  
   